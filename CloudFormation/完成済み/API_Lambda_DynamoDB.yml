AWSTemplateFormatVersion: "2010-09-09"
Description: "Lambda function integrated with HTTP API"

#HTTP APIとLambda関数の結合をし、URI経由でLambda処理することでDynamoDBからレコードを取得し、表示させる
#DynamoDBは作成済みで、データ入っている前提

#名前つける
Parameters:
  apiGatewayName:
    Type: String
    Default: my-api

  apiGatewayStageName:
    Type: String
    Default: test_stage_name

  LambdaName:
    Type: String
    Default: "test_lambda"

Resources:
  #Lambda用IAMロール(SNSトピックアクセス用)
  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      RoleName: LambdaRole


  #Lambda関数(APIレスポンス用)
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaName
      Description: "Lambda function integrated with HTTP API"
      Handler: index.lambda_handler
      Runtime: python3.12
      MemorySize: 256
      Role: !GetAtt LambdaIamRole.Arn
      Timeout: 300
      #Architectures: x86_64

      #DynamoDBからレコード取得できたか、否かでHTTPアクセス時にステータスコードを変えればOK
      #LambdaからDynamoDBに認証情報を渡すことで、ソートしたものを返すように設定する。DynamoDB側で設定必要かも。
      Code:
        ZipFile: !Sub |
          import boto3
          import json
          import os
          import datetime

          def lambda_handler(event, context):
            #DynamoDBのレコード取得する

            dynamoDB = Aws::DynamoDB::Resource.new(region: 'ap-northeast-1')
            table = dynamoDB.table('test-dynamoDB')

            # クエリパラメータで指定されたidに紐づくデータを取得する(メソッドリクエスト、クエリ文字列パラメータ関連)
            resp = table.get_item({
            key: { 'id' => event["queryStringParameters"]["id"].to_i }
            })

            if resp["item"]: 
              return {
                'isBase64Encoded':False,
                'statusCode':200,
                'headers':{},
                'body':"Integration with HTTP API is successful."
                }

            else:
              return  {
                'isBase64Encoded':False,
                'statusCode':404,
                'headers':{},
                'body':"Picking item up from DynamoDB table is failed."
              }


  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Description: Example API Gateway
      ProtocolType: HTTP
      Name: !Ref apiGatewayName
      #Target: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunction}/invocations


  HttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: !Ref apiGatewayStageName
      AutoDeploy: True
      
  #LambdaとHTTPAPIを統合
  HttpApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      Description: "HTTP integration test"
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      
      #ここでLambda関数と結合するようARNで指定
      IntegrationUri: !GetAtt LambdaFunction.Arn
      PayloadFormatVersion: '2.0'

  #Lambdaのトリガー設定
  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      #トリガー元
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*/test"


  #URIのルートを決めてる(なので、InvokeFunctionで、Arnに/testのついたURIを指定することで、目的のAPIにルーティングされる)
  HttpApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: GET /test
      AuthorizationType: NONE
      Target: !Sub "integrations/${HttpApiIntegration}"


#API URLを取得したい
Outputs:
  ApiGatewayInvokeURL:
    Value: !Sub https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStageName}

  LambdaArn:
    Value: !GetAtt LambdaFunction.Arn