# やりたいこと：SNSでデフォルトで文章入れてるメール送りつつLambda関数でインスタンス止める
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

# 課金はほぼされないので作成しておく
Parameters:
  LambdafuncName:
    Type: String
    Description: Type your lambda function
  SNSTopicName:
    Type: String
    Default: "SNSTopic_Alarm"
  EmailAddress:
    Type: AWS::SSM::Parameter::Value<String>
    Default: "my_main_gmail_address"

  LambdaRoleName:
    Type: String
    Default: "Lambda_role_name"

Resources:
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Ref SNSTopicName
      TopicAttributes:
        DefaultSubscriptionAttributes: 
          '{"RawMessageDelivery": "false"}'
        DefaultEmailSubscriptionAttributes: 
          '{"EmailSubject": "EC2 Instances stopped successfully", "EmailContent": "Your running instances has stopped successfully. ."}'

  # sending email
  EmailSNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      Endpoint: !Ref EmailAddress
      TopicArn: !Ref SNSTopic

  # Lambda invoke
  LambdaSNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      Endpoint: !GetAtt LambdafuncStoppingEC2.Arn
      TopicArn: !Ref SNSTopic

 #Lambda function to stop EC2 Instance
  LambdafuncStoppingEC2:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdafuncName
      Description: "EC2インスタンス停止用"
      Handler: index.lambda_handler
      Runtime: python3.12
      #Memoryは128以上のみ可
      MemorySize: 128
      Role: !GetAtt LambdaIamRole.Arn
      Timeout: 30
      #Architectures: x86_64
      Environment:  #環境変数
        Variables:
          topic_arn: !Ref SNSTopic
      #コードだけ調整必要
      Code:
        ZipFile: !Sub |
          import boto3
          import logging

          def lambda_handler(event, context):
            region = 'ap-southeast-2'
        
            ec2 = boto3.client('ec2', region_name=region)
            # instance_id = 'EC2_instance_id'

            list_running = ec2.describe_instances(
              Filters=[{"Name":"instance-state-name","Values":["running"]}]
              )
            
            # 停止しているインスタンスすべてピックアップ    
            list_stopped = ec2.describe_instances(
            Filters=[{"Name":"instance-state-name","Values":["stopped"]}]
            )
        
            # 起動しているインスタンスのIDをそれぞれ取得し、Shut downする
            for reservation in list_running['Reservations']:
              for instance in reservation['Instances']:
                instance_id = instance.get('InstanceId')
                logging.log(100, "インスタンスID: " + str(instance_id))    
            
                ec2.stop_instances(InstanceIds=[instance_id])
            return {
              'statuscode': 200,
              'body': 'Instance stopped successfully'
            }

  #Lambda用IAMロール(SNSトピックアクセス用)
  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      #信頼ポリシー
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      
      #Permission Policy
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/CloudWatchReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess 
      RoleName: !Ref LambdaRoleName

  # 作成したリソースがSSM Parameter Storeに登録されるよう記載
  SSMSNSTopic:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "SNSTopicForStoppingEC2"
      Type: String
      Value: !Ref SNSTopic

  # 名前分けていく
  SSMLambdafuncStoppingEC2:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "LambdafuncStoppingEC2"
      Type: String
      Value: !Ref LambdafuncStoppingEC2